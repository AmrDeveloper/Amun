{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>A Statically typed, compiled general purpose low level programming language built using C++ and LLVM Infrastructure framework, the design was inspired from many programming languages with the goal to be simple and productive</p> <pre><code>import \"cstdio\"\n\nfun main() {\n    printf(\"Hello, World!\\n\");\n}\n</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li>Static Types</li> <li>Type inference</li> <li>Functions</li> <li>Pointers and Function Pointer</li> <li>Struct, Packed struct and Tuples</li> <li>Single and Multi Dimensional Arrays</li> <li>Strong Enumeration</li> <li>Local and Global Variables</li> <li>Local and Global compile time constants declaraions</li> <li>Import and Load statements and blocks</li> <li>If, else if and else statements</li> <li>If Else Expression</li> <li>While statement</li> <li>For range, Forever statements</li> <li>For each statement with an optional name and step</li> <li>Switch Statement and Expression</li> <li>Break and continue statements with optional times</li> <li>Declare Prefix, Infix, and Postfix functions</li> <li>Binary, Logical, Comparisons, Bitwise Operators</li> <li>Assignments Operators =, +=, -=, *=, /=</li> <li>Singed and Un Singed Integer types</li> <li>Standard C Headers as part of the Standard library</li> <li>No implicit casting, every cast must be explicit to be clear</li> <li>Defer Statement</li> <li>Default initialization value for global and local variables</li> <li>Resolving Constants Index, If Expressions at Compile time</li> <li>Generic Programming</li> </ul>"},{"location":"#inspiration","title":"Inspiration","text":"<p>The design of Amun is inspired by a number of languages such as <code>C</code>, <code>C++</code>, <code>Go</code>, <code>Rust</code>, <code>Jai</code>, special thanks for every create language designer and for every open source project that share the creativity and knowledge.</p>"},{"location":"build/","title":"Build","text":""},{"location":"build/#build-from-source-code","title":"Build from source code","text":"<p>For now you need to build Amun from source code, it's simple to do that in small steps</p>"},{"location":"build/#requirements","title":"Requirements","text":"<p>To build Amun source code you need to have some program installed</p> <ul> <li>C++ Compiler (GCC or Clang) that supports C++20</li> <li>LLVM 14 or 15</li> <li>Cmake 3.16.0 or more</li> <li>Python (Optional only for development)</li> <li>Clang Format (Optional only for development)</li> <li>Clangd (Optional only for development)</li> <li>Ninja (Optional only for development)</li> <li>CCashe (Optional only for development)</li> </ul>"},{"location":"build/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/amrdeveloper/amun.git\n</code></pre>"},{"location":"build/#build-the-project","title":"Build the project","text":"<pre><code>cd amun\nmkdir build\ncd build\ncmake ..\nmake\n</code></pre>"},{"location":"build/#formating-source-code","title":"Formating source code","text":"<p>For development you can format the source code easily using python3 script</p> <pre><code>python scripts/format_code.py\n</code></pre>"},{"location":"build/#validate-all-samples","title":"Validate all samples","text":"<p>For development you can check and validate all samples options using python3 script</p> <pre><code>python scripts/check_samples.py\n</code></pre>"},{"location":"build/#compling-all-samples","title":"Compling all samples","text":"<p>For development you can compile all samples options using python3 script</p> <pre><code>python scripts/compile_samples.py\n</code></pre>"},{"location":"compiler_options/","title":"Compiler Options","text":"<p>Currently the Compiler CLI options is your best friend to interact with the compiler (this may changed in the future) for now the compile has some options to make your life easier</p>"},{"location":"compiler_options/#create-new-project","title":"Create New Project","text":"<p>To create a new Hello world project you can use <code>create</code> command</p> <pre><code>amun create &lt;name&gt;\n</code></pre> <p>It will create a new folder with the project name that has <code>main.amun</code> file with hello world sample</p>"},{"location":"compiler_options/#compile","title":"Compile","text":"<p>amun compile command is the most useful command for you takes the main source file path and compile it</p> <pre><code>amun compile &lt;path&gt; &lt;options&gt;\n</code></pre> <p>The default output file name is <code>output</code> but you can customize it using <code>-o</code> flag</p> <pre><code>amun compile &lt;path&gt; -o &lt;outout name&gt;\n</code></pre> <p>The default is that amun compile report only errors but you can enable reporting warns using <code>-w</code> flag</p> <pre><code>amun compile &lt;path&gt; -w\n</code></pre> <p>The default is the the compiler will continue working if it found no error but you can make it convert warns to error using <code>-werr</code> flag</p> <pre><code>amun compile &lt;path&gt; -werr\n</code></pre>"},{"location":"compiler_options/#compile-to-llvm-ir-file","title":"Compile to LLVM IR File","text":"<p>This command is accepting the same options like the <code>compile</code> command but it produce LLVM Ir file</p> <pre><code>amun emit-ir &lt;path&gt; &lt;options&gt;\n</code></pre> <p>The default output file name is <code>output</code> but you can customize it using <code>-o</code> flag</p> <pre><code>amun compile &lt;path&gt; -o &lt;outout name&gt;\n</code></pre> <p>The default is that amun compile report only errors but you can enable reporting warns using <code>-w</code> flag</p> <pre><code>amun compile &lt;path&gt; -w\n</code></pre> <p>The default is the the compiler will continue working if it found no error but you can make it convert warns to error using <code>-werr</code> flag</p>"},{"location":"compiler_options/#check","title":"Check","text":"<p>amun check command takes the source file path to parse and perform type checking then report if there are any errors</p> <pre><code>amun check &lt;path&gt;\n</code></pre>"},{"location":"compiler_options/#version","title":"Version","text":"<p>amun version command print the current langauge version in the standard out</p> <pre><code>amun version\n</code></pre>"},{"location":"compiler_options/#help","title":"Help","text":"<p>amun help command in a local command that show you what are the options and how to use them</p> <pre><code>amun help\n</code></pre>"},{"location":"contribution/","title":"Contribute","text":"<p>Amun is an open source language and everyone is welcome to contribute and be part of the community, every help is very useful and you can contribute in different ways</p>"},{"location":"contribution/#contribute-in-source-code","title":"Contribute in source code","text":"<p>If you found any part of the source code that can be improved or optimized feel free to report it and then you can start a pull request</p>"},{"location":"contribution/#report-bug","title":"Report bug","text":"<p>If you found any bugs in any feature feel free to report it using Github issues with cases to reproduce it again</p>"},{"location":"contribution/#suggest-feature","title":"Suggest feature","text":"<p>If you found any feature that matches our design goal and can be helpful, feel free to suggest it with your thought about how it can be useful and should be implemented</p>"},{"location":"contribution/#improve-documentations","title":"Improve documentations","text":"<p>The documentation should be simple and cover the features and be easy for any one to start working with the language, If you found any part of the documentation is un covered or needs to improved feel free to open an issue and we can make a conversation about how to improve it them submit a pull request</p>"},{"location":"contribution/#special-thanks","title":"Special thanks","text":"<p>Special thanks for everone in the community that help the project to grow and be better by the time</p>"},{"location":"reference/arrays/","title":"Arrays","text":"<p>Amun has single and multi dimensions arrays</p>"},{"location":"reference/arrays/#fixed-size-array-type","title":"Fixed size Array type","text":"<p>To create a fixed size array type, you need to prefix the type with size <code>[Size]T</code> for example</p> <pre><code>[10]int64\n[15]float64\n</code></pre>"},{"location":"reference/arrays/#declare-one-dimention-array","title":"Declare one dimention array","text":"<p>To create array of values you need to write values spreated by comma <code>,</code> between <code>[</code> and <code>]</code></p> <pre><code>var array = [1, 2, 3];\nvar [3]array = [1, 2, 3];\n</code></pre>"},{"location":"reference/arrays/#declare-multi-dimentions-array","title":"Declare Multi dimentions array","text":"<p>Multi dimensions array is an array of arrays so it just arrays spreated by comma inside one array</p> <pre><code>var arrays = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nvar [3][3]arrays = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n</code></pre>"},{"location":"reference/arrays/#access-array-element-by-index","title":"Access Array element by index","text":"<p>To access array element by index you need to use index expression for example</p> <pre><code>array[0]\narray[0][0]\narray[0][0][0]\n</code></pre>"},{"location":"reference/arrays/#modify-array-element-by-index","title":"Modify Array element by index","text":"<p>To modify array element by index you need to use index as lvalue for example</p> <pre><code>array[0] = value;\narray[0][0] = value;\narray[0][0][0] = value;\n</code></pre>"},{"location":"reference/assignments/","title":"Assignment","text":"<p>In Amun assignments is an statement not expression so it will not return a value</p> <pre><code>var x = 10;\nx = 20;\n</code></pre> <p>You can't use the assignments as an condition such like in C/C++</p>"},{"location":"reference/break/","title":"Break","text":"<p>The break statement ends the loop immediately when it is encountered</p> <pre><code>for {\n    break;\n}\n</code></pre> <p>By default breakends the current loop immediately but you can chooice which loop to end</p> <pre><code>for 0 .. 10 {\n    for 0 .. 10 {\n        break 2;\n    }\n}\n</code></pre>"},{"location":"reference/cast/","title":"Cast","text":"<p>Amun has no implict casting even between integers types, every cast must be explicit</p> <p>To cast from your expression to another type for example to int64 you need to prefix the value with cast expression for example</p> <pre><code>var integer = cast(int64) float_value;\n</code></pre> <p>If the cast is impossitable for example casting between two un castable types you will get a clear compile time error</p>"},{"location":"reference/comments/","title":"Comments","text":"<p>Amun has support for single and multi lines comments with the same C/C++ Comments styles</p>"},{"location":"reference/comments/#single-line-commnet","title":"Single line commnet","text":"<p>Single line comment message should be started with <code>//</code></p> <pre><code>// Single line Comment message\n</code></pre>"},{"location":"reference/comments/#multi-line-commnet","title":"Multi line commnet","text":"<p>Multi lines comment message should be started with <code>/*</code> and end with <code>*/</code></p> <pre><code>/*\n Multi lines Comment message\n ...\n ...\n ...\n*/ \n</code></pre>"},{"location":"reference/const/","title":"Const","text":"<p>Compile time constants declaraions</p> <p>Sometimes a certain value is used many times throughout a program, and it can become inconvenient to copy it over and over. What\u2019s more, it\u2019s not always possible or desirable to make it a variable that gets carried around to each function that needs it. In these cases, the const keyword provides a convenient alternative to code duplication:</p> <p>Global Compiler time constants declarations</p> <pre><code>const ONE = 1;\nconst TWO = 2;\n\nconst NEW_LINE = '\\n';\nconst IS_DEBUG = true;\n</code></pre> <p>You can also make compile time constants declaraions local only to functions scope</p> <pre><code>fun function() {\n    const ONE = 1;\n    const TWO = 2;\n}\n</code></pre>"},{"location":"reference/continue/","title":"Continue","text":"<p>The continue statement in Amun programming works somewhat like the break statement. Instead of forcing termination, it forces the next iteration of the loop to take place, skipping any code in between.</p> <pre><code>for {\n    continue;\n}\n</code></pre> <p>By default continue forces the next iteration of the current loop but you can chooice which loop to focees</p> <pre><code>for 0 .. 10 {\n    for 0 .. 10 {\n        continue 2;\n    }\n}\n</code></pre>"},{"location":"reference/defer/","title":"Defer","text":"<p>In Amun defer statement is used to make call statement to called as before ending the current scope</p> <p>To make and call expression as defered you need to prefix it with defer keyword for example</p> <pre><code>defer printf(\"World\");\nprintf(\"Hello\");\n</code></pre> <p>The output for this snippet will be <code>HelloWorld</code>.</p> <p>Defer statement is very useful feature that can be used to free resource or close strams for example</p> <pre><code>var point = create_point();\ndefer delete_point(point);\nprint_point(point);\n</code></pre> <p>You can see how it useful in case that you allocated memoey in function that has many return statements inside  nested scopes, so in the normal case you need to free this memory before each return statement</p> <p>For example without defer statement</p> <pre><code>fun function() void {\n    var memory = allocate_memory();\n\n    if condition {\n        free_memory(memory);\n        return;\n    }\n\n    if condition2 {\n        free_memory(memory);\n        return;\n    }\n\n    free_memory(memory);\n    return;\n}\n</code></pre> <p>The same example with defer statement will be</p> <pre><code>fun function() void {\n    var memory = allocate_memory();\n    defer free_memory(memory);\n\n    if condition return;\n    if condition2 return;\n\n    return;\n}\n</code></pre>"},{"location":"reference/directives/","title":"Directives","text":"<p>Directives are resolved by the Amun Compiler at compile time and can give you a good information for example information about source code position</p> <p>To get the current file path as a char array (string)</p> <pre><code>var path = #filepath;\n</code></pre> <p>To get the current line number in source code</p> <pre><code>var current_line_number = #line;\n</code></pre> <p>To get the current column number in source code</p> <pre><code>var current_column_number = #column;\n</code></pre>"},{"location":"reference/enum/","title":"Enum","text":"<p>Amun has compile time strong enumeration by default so you can't compare enum element with integer values,</p>"},{"location":"reference/enum/#declare-enum","title":"Declare Enum","text":"<pre><code>enum Number {\n    ONE\n    TWO\n}\n</code></pre>"},{"location":"reference/enum/#declare-enum-with-type","title":"Declare Enum with Type","text":"<p>Enum element by default has <code>int32</code> type but you can declare it with any integers types from int8,</p> <pre><code>enum Number : int8 {\n    ONE\n    TWO\n}\n</code></pre> <p>You can also give element a value that match the type for example</p> <pre><code>enum Number : int8 {\n    ONE = 1,\n    TWO = 2,\n}\n</code></pre>"},{"location":"reference/enum/#access-enum-element","title":"Access Enum element","text":"<p>To access enum element you need to access it using double colon <code>::</code> for example</p> <pre><code>var one : Number = Number::ONE;\nvar two = Number::TWO;\n</code></pre>"},{"location":"reference/enum/#pass-enum-elemnet","title":"Pass Enum elemnet","text":"<p>To pass enum element as function parameter it must has Enum Name as type and can't pass it as intgers</p> <pre><code>fun pass_number(number Number) void {\n    return\n}\n</code></pre>"},{"location":"reference/enum/#enum-number-of-fields","title":"Enum number of fields","text":"<p>Amun has compile time attribute for enums to get the number of fields for example</p> <pre><code>var c = Number.count;\n</code></pre>"},{"location":"reference/for/","title":"For","text":"<p>Currently Amun has theww types of for statement and we may have more in the future</p>"},{"location":"reference/for/#forever","title":"Forever","text":"<p>Forever statement is a simple infinty for loop inspired from Go design and it recommended if you want to loop for ever, the advantage over while loop with condition true is that it will  generate less machine code that don't need to jump to the condition and check if it true then jump back to the body.</p> <pre><code>for {\n    ...\n}\n</code></pre>"},{"location":"reference/for/#for-range","title":"For range","text":"<p>For range statement is used to loop over range of values from x to y includes x and y,  and the variable will be named it by default for example.</p> <pre><code>for 0 to 10 {\n    printf(\"%d\", it);\n}\n</code></pre> <pre><code>for 'a' .. 'z' {\n    printf(\"%c\", it);\n}\n</code></pre> <p>You can explicit change the default variable name from it to any identifier for example.</p> <pre><code>for i : 0 to 10 {\n    printf(\"%d\", i);\n}\n</code></pre> <pre><code>for c : 'a' .. 'z' {\n    printf(\"%c\", c);\n}\n</code></pre> <p>The default loop step is 1 but you can change it for example.</p> <pre><code>for 0 to 10 : 2{\n    printf(\"%d\", it);\n}\n</code></pre>"},{"location":"reference/for/#for-each","title":"For each","text":"<p>Amun has for each support for single and multi dimensions fixed size arrays, and implicit variables for index and value</p> <pre><code>var array = [1, 2, 3];\nfor array {\n    printf(\"Index %d, value = %d\\n, it_index, it);\n}\n</code></pre> <p>You can set explicit name for each element for example</p> <pre><code>var array = [1, 2, 3];\nfor element : array {\n    printf(\"Index %d, value = %d\\n, it_index, element);\n}\n</code></pre>"},{"location":"reference/function/","title":"Function","text":"<p>Functions in Amun is like function in any other language it take parameter and return value, but with extra syntax sugger for readability</p>"},{"location":"reference/function/#function-declaration","title":"Function declaration","text":"<pre><code>fun sum(x int64, y int64) int64 {\n    return x + y;\n}\n</code></pre>"},{"location":"reference/function/#single-line-function-declaration","title":"Single line function declaration","text":"<p>If you have a function that only return expression you can declare it in one line</p> <pre><code>fun duplicate(n int64) int64 = n * 2;\n</code></pre>"},{"location":"reference/function/#function-declaration-with-0-parameter","title":"Function declaration with 0 parameter","text":"<p>If your function require 0 parameter you can declare it without <code>()</code></p> <pre><code>fun show_info void {\n    ...\n    return;\n}\n</code></pre>"},{"location":"reference/generic/","title":"Generic","text":"<p>Generics Programming</p> <p>Amun has supporting for generic programming and give you the ability to create generic functions and structures</p> <p>Here is an example on how to To create declare generic parameter for struct</p> <pre><code>struct Pair &lt;T&gt; {\n    first T;\n    second T;\n}\n</code></pre> <p>When you use this type you need spicify the generic parameter you declared them before</p> <p>for example to create a Pair of int64 you can write it like this</p> <pre><code>var ipairs : Pair&lt;int64&gt;;\n</code></pre> <p>You can create a pair of other pairs of of pairs pointers</p> <pre><code>var pair_of_pairs : Pair&lt;Pair&lt;int64&gt;&gt;;\nvar pair_of_pairs_ptr : Pair&lt;*Pair&lt;int64&gt;&gt;;\n</code></pre> <p>You can also create a pair of array of any type for example</p> <pre><code>var pair_of_array : Pair&lt;[10]int64&gt;;\n</code></pre> <p>Declaring a generic function is not very different from generic struct for example</p> <pre><code>fun sum&lt;T&gt; (x T, y T) T {\n    return x + y;\n}\n</code></pre> <p>And when calling generic function you neet also to spicify the generic parameter for example</p> <pre><code>sum&lt;int64&gt;(1, 1);\nsum&lt;intfloat&gt;(1.0, 1.0);\n</code></pre>"},{"location":"reference/hello/","title":"Hello World","text":"<p>Simple Hello world example it similer to C you need to import the io library and use printf from it</p> <pre><code>import \"cstdio\"\n\nfun main() int64 {\n    printf(\"Hello, World!\\n\");\n    return 0;\n}\n</code></pre>"},{"location":"reference/if/","title":"If","text":"<p>Amun has both If statement and Expression</p>"},{"location":"reference/if/#if-statement","title":"If Statement","text":"<p>If Statement is the same line in C/C++ it execute the block only if the condition is not evaluated to false</p> <pre><code>if condition {\n\n}\nelse if condition2 {\n\n}\nelse {\n\n}\n</code></pre>"},{"location":"reference/if/#if-else-expression","title":"If Else Expression","text":"<p>If Else Expression is used to return one of two values depend on the condition for example</p> <pre><code>var result = if (condition) value1 else value2;\n</code></pre>"},{"location":"reference/if/#compile-time-if-else-expression","title":"Compile time If Else expression","text":"<p>If the condition and values of if else are constants and can resolved during the compile time you can use it as a value for global variable</p> <pre><code>var is_debug = true;\nvar build_info = if (is_debug) 10 else 20;\n\nfun main() int64 {\n    return 0;\n}\n</code></pre>"},{"location":"reference/infix_function/","title":"Infix Function","text":""},{"location":"reference/infix_function/#infix-function","title":"Infix function","text":"<p>Amun has support for <code>infix</code> keyword inspired from <code>switt</code> and <code>kotlin</code> design, simpily it used to mark function with two parameter to be used as nomral function and also as infix operator</p> <pre><code>@infix fun plus(x int64, y int64) int64 = x + y;\n\nfun main() int64 {\n    var result1 = plus(10, 20);\n    var result2 = 10 plus 20;\n    return 0;\n}\n</code></pre>"},{"location":"reference/lambda/","title":"Lambda","text":"<p>Amun has support for lambda expression with explicit and implicit capture</p>"},{"location":"reference/lambda/#lambda-expression","title":"Lambda Expression","text":"<p>Lambda expression start with <code>{</code> and end with <code>}</code> similer to block statement but with extra <code>() T -&gt;</code> to declare the parameters and return types</p> <p>for example to create lambda expression that take two integers and return the sum you can write it like this</p> <pre><code>var sum_lambda = { (x int64, y int64) -&gt;\n    return x + y;\n};\n\nvar result = sum_lambda(1, 1);\n</code></pre> <p>If your lambda has no explicit parameters and return void Amun has syntax sugger for this case for example</p> <pre><code>var hello = {\n    printf(\"Hello, World!\");\n};\n\nhello();\n</code></pre> <p>You can also call the lambda directly for example</p> <pre><code>var one = { () int64 -&gt; return 1; }();\n</code></pre>"},{"location":"reference/lambda/#lambda-outside-parentheses","title":"lambda outside parentheses","text":"<p>In Amun if your function call last parameter type is lambda you can write it outside the parentheses for example</p> <pre><code>fun do(callback *() void) void {\n    callback();\n}\n\nfun main() int64 {\n    do() {\n        printf(\"Hello, World!\");\n    }\n    return 0;\n}\n</code></pre>"},{"location":"reference/memory/","title":"Memory","text":"<p>Amun gives you the same level of freedom of dealing with memory managment like C/C++, there is no garbage collection at all, </p>"},{"location":"reference/memory/#pointer-type","title":"Pointer type","text":"<p>To create a pointer type you need to write the type prefix with <code>*</code> for example</p> <pre><code>var x : *int64;\nvar y : *float64;\n</code></pre>"},{"location":"reference/memory/#derefernce","title":"Derefernce","text":"<p>To derefernce pointer you need to use derefernce operator <code>&amp;</code> similer to C</p> <pre><code>var p : *int64 = create_value();\nvar v : int64 = &amp;p;\n</code></pre>"},{"location":"reference/memory/#create-and-free-memory","title":"Create and Free memory","text":"<p>Currently the only way to create and free memory is to use <code>libc</code> functions such as <code>malloc</code> and <code>free</code></p>"},{"location":"reference/operator_overloading/","title":"Operator Overloading","text":""},{"location":"reference/operator_overloading/#operator-overloading","title":"Operator overloading","text":"<p>Amun supports operator overloading, some operators can be used to accomplish different tasks based on their input arguments, This is possible because operators are syntactic sugar for method calls, for example <code>+</code> opertor in a + b will converted to <code>add(a, b)</code> for those types.</p> <p>There are 3 types of operator overloaded functions depending on what operator you want to override.</p> <p>Note: Any overloaded operator function must has at least non primitives type</p>"},{"location":"reference/operator_overloading/#prefix-operator-overloading","title":"Prefix Operator overloading","text":"<p>Declare prefix operator overloading function is not very almost the same like prefix function that take only one argument</p> <p>Prefix operators are <code>!</code>, <code>~</code>, <code>++</code>, <code>--</code>.</p> <pre><code>@prefix operator !  (x Type) Type {}\n\n@prefix operator ~  (x Type) Type {}\n\n@prefix operator ++ (x Type) Type {}\n\n@prefix operator -- (x Type) Type {}\n</code></pre>"},{"location":"reference/operator_overloading/#infix-operator-overloading","title":"Infix Operator overloading","text":"<p>Infix operators are <code>+</code>, <code>-</code>, <code>+</code>, <code>/</code>, <code>%</code>, <code>==</code>, <code>!=</code>, <code>&gt;=</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&amp;</code>, <code>|</code>, <code>&amp;&amp;</code>, <code>||</code>.</p> <pre><code>operator +  (x Type, y Type) Type {}\noperator -  (x Type, y Type) Type {}\noperator *  (x Type, y Type) Type {}\noperator /  (x Type, y Type) Type {}\noperator %  (x Type, y Type) Type {}\n\noperator == (x Type, y Type) Type {}\noperator != (x Type, y Type) Type {}\noperator &gt;= (x Type, y Type) Type {}\noperator &lt;= (x Type, y Type) Type {}\n\noperator &lt;&lt; (x Type, y Type) Type {}\noperator &gt;&gt; (x Type, y Type) Type {}\n\noperator &amp;  (x Type, y Type) Type {}\noperator |  (x Type, y Type) Type {}\n\noperator &amp;&amp; (x Type, y Type) Type {}\noperator || (x Type, y Type) Type {}\n</code></pre> <p>Note: You can add <code>@infix</code> before operator declaraion but it default and no need to explicit write it</p>"},{"location":"reference/operator_overloading/#postfix-operator-overloading","title":"Postfix Operator overloading","text":"<p>Declare postfix operator overloading function is not very almost the same like postfix function that take only one argument</p> <p>Postfix operators are <code>!</code>, <code>~</code>, <code>++</code>, <code>--</code>.</p> <pre><code>@postfix operator ++ (x Type) Type {}\n\n@postfix operator -- (x Type) Type {}\n</code></pre>"},{"location":"reference/postfix_function/","title":"Postfix Function","text":""},{"location":"reference/postfix_function/#postfix-function","title":"Postfix function","text":"<p>Amun has support for <code>postfix</code> keyword inspired from <code>switt</code> design, simpily it used to mark function with one parameter to be used as nomral function and also as postfix operator</p> <pre><code>@postfix fun positiveOrZero(x int64) int64 {\n    return if (x &gt; 0) x else 0;\n}\n\nfun main() int64 {\n    var result = -5 positiveOrZero;\n    return 0;\n}\n</code></pre>"},{"location":"reference/prefix_function/","title":"Prefix Function","text":""},{"location":"reference/prefix_function/#prefix-function","title":"Prefix function","text":"<p>Amun has support for <code>prefix</code> keyword inspired from <code>switt</code> design, simpily it used to mark function with one parameter to be used as nomral function and also as postfix operator</p> <pre><code>@prefix fun not(b bool) bool = !b;\n\nfun main() int64 {\n    var result = not true;\n    return 0;\n}\n</code></pre>"},{"location":"reference/struct/","title":"Struct","text":""},{"location":"reference/struct/#structure","title":"Structure","text":"<p>Amun has structures type similer to C and Go</p>"},{"location":"reference/struct/#declaration","title":"Declaration","text":"<pre><code>struct Point {\n    x int64;\n    y int64;\n}\n</code></pre>"},{"location":"reference/struct/#packed-struct-declaration","title":"Packed Struct Declaration","text":"<p>To declare struct with no padding between fields you need to use <code>#packed</code> directive</p> <pre><code>// 1 (with 3 padding) + 4 + 1 (with 3 padding) = 12 bytes\nstruct UnPackedStruct {\n    a int8;\n    b int32;\n    c int8;\n}\n\n// 1 + 4 + 1 = 6 bytes\n@packed struct PackedStruct {\n    a int8;\n    b int32;\n    c int8;\n}\n</code></pre>"},{"location":"reference/struct/#initialization","title":"Initialization","text":"<p>No need for <code>typedef</code> similer to C to declare variable without keyword struct, just initialize it</p> <pre><code>var point : Point;\n</code></pre>"},{"location":"reference/struct/#constructor","title":"Constructor","text":"<p>You can initialize structure and assign values for all fields using initialize expression for example</p> <pre><code>struct Vector3 {\n    x int64;\n    y int64;\n    z int64;\n}\n\nvar vector3 = Vector3(1, 2, 3);\n</code></pre>"},{"location":"reference/struct/#destructor","title":"Destructor","text":"<p>Current Amun design has not destructor, but for destructors you can easily depend on <code>defer</code> feature to got the same feature for example</p> <pre><code>var point : *Point = create_poinnt();\ndefer delete_point(point);\n</code></pre>"},{"location":"reference/struct/#access-fields","title":"Access fields","text":"<p>To access field from struct that initialized on the stack or the heap in both you will use dot <code>.</code> to access it</p> <pre><code>var x = point.x\n</code></pre>"},{"location":"reference/struct/#modify-field-value","title":"Modify field value","text":"<p>To modify struct field value you can also use dot <code>.</code> to update it</p> <pre><code>point.x = 10;\n</code></pre>"},{"location":"reference/switch/","title":"Switch","text":"<p>Amun has both switch statement and expression</p>"},{"location":"reference/switch/#switch-statement","title":"Switch Statement","text":"<p>Switch statement is the same like in C/C++ it execute block if his case value match the condition value, if no value match it will execute an optional default block</p> <pre><code>switch (10) {\n    1       -&gt; printf(\"One\");\n    2, 4    -&gt; printf(\"Two or four\");\n    else    -&gt; printf(\"Else\");\n}\n</code></pre>"},{"location":"reference/switch/#switch-expression","title":"Switch Expression","text":"<p>Switch expression is used to return a value of branch if his case match the condition value, if no value match it will return the value of default block</p> <pre><code>var result = switch (10) {\n    2, 4, 6, 8 -&gt; true;\n    else -&gt; false;\n};\n</code></pre>"},{"location":"reference/switch/#compile-time-switch-expression","title":"Compile time switch expression","text":"<p>If the condition and all values are constants and can resolved during the compile time you can use it as value for global variable</p> <pre><code>var build_flavor = Build::RELEASE;\nvar config = switch (build_flavor) {\n    Build::DEBUG   -&gt; 1;\n    Build::RELEASE -&gt; 2;\n    else           -&gt; 3;\n};\n\nfun main() int64 {\n    return 0;\n}\n</code></pre>"},{"location":"reference/tuples/","title":"Tuples","text":""},{"location":"reference/tuples/#tuples","title":"Tuples","text":"<p>A tuple is a collection of values of different types. Tuples are constructed using parentheses <code>()</code>, and each tuple itself is a value with type signature <code>(T1, T2, ...)</code>, where <code>T1</code>, <code>T2</code> are the types of its members. Functions can use tuples to return multiple values, as tuples can hold any number of values.</p> <pre><code>var ituples = (1, 2, 3, 4);\n</code></pre> <pre><code>fun print_tuple(tuple (int64, int64)) {\n    printf(\"%d\\n\", tuple.0);\n    printf(\"%d\\n\", tuple.1);\n}\n</code></pre> <pre><code>struct Tuples {\n    ituple (int64, int64);\n    ftuple (float64, float64);\n}\n</code></pre> <pre><code>fun return_ituple(x int64, y int64) (int64, int64) {\n    return (x, y);\n}\n</code></pre> <pre><code>fun make_tuple&lt;T&gt;(x T, y T) (T, T) {\n    return (x, y);\n}\n</code></pre> <pre><code>var tuple = ([1, 2, 3], [\"a\", \"b\", \"c\"]);\nfor 0 .. 2 {\n    printf(\"%d - %s\\n\", tuple.0[it], tuple.1[it]);\n}\n</code></pre>"},{"location":"reference/type_alias/","title":"Type alias","text":"<p>Amun has support for type alias to make your code simpler, more readable</p> <p>It easy to declare type alias with syntax inspired from declaring variables</p> <p>The grammer for type alias is the following</p> <pre><code>type &lt;name&gt; = &lt;aliased type&gt;;\n</code></pre> <p>Examples</p> <pre><code>type long = int64;\ntype iPair = Pair&lt;int64, int64&gt;;\ntype callback = *() void;\n</code></pre>"},{"location":"reference/type_size/","title":"Type Size","text":""},{"location":"reference/type_size/#type-size-expression","title":"Type Size expression","text":"<p>Type Size expression is used to return the size as <code>int64</code> for any type</p> <pre><code>type_size(int64)\ntype_size(Point)\ntype_size(*int64)\n</code></pre>"},{"location":"reference/value_size/","title":"Value size expression","text":"<p>Value Size expression is used to return the size as <code>int64</code> for any Value</p> <pre><code>value_size(a)\nvalue_size(\"Amun\")\nvalue_size([1, 2, 3])\n</code></pre>"},{"location":"reference/values/","title":"Values","text":"<p>Amun has support for primitives types similer to C/C++</p>"},{"location":"reference/values/#numbers","title":"Numbers","text":"<p>Amun has different size of signed and un signed integers and floats</p>"},{"location":"reference/values/#un-signed-integers","title":"un signed integers","text":"<p>int8</p> <p>int16</p> <p>int32</p> <p>int64</p>"},{"location":"reference/values/#signed-integers","title":"signed integers","text":"<p>uint8</p> <p>uint16</p> <p>uint32</p> <p>uint64</p>"},{"location":"reference/values/#floats","title":"Floats","text":"<p>float32</p> <p>float64</p>"},{"location":"reference/values/#booiean","title":"BooIean","text":"<p>In Amun you can use <code>bool</code> or <code>int1</code> to declare boolean type, they are totaly the same</p> <pre><code>var t : bool = true;\nvar f : int1 = false;\n</code></pre>"},{"location":"reference/values/#string","title":"String","text":"<p>Strings are actually one-dimensional array of characters terminated by a null character '\\0'</p> <pre><code>var hello : *char = \"Hello, World!\";\n</code></pre>"},{"location":"reference/values/#character","title":"Character","text":"<p>Uses char type to store characters and letters. However, the char type is integer type because underneath C stores integer numbers instead of characters.In C, char values are stored in 1 byte in memory,and value range from -128 to 127.</p> <p>In order to represent characters, the computer has to map each integer with a corresponding character using a numerical code. The most common numerical code is ASCII, which stands for American Standard Code for Information Interchange.</p> <pre><code>var character : char = 'x';\n</code></pre>"},{"location":"reference/values/#null","title":"Null","text":"<p>NULL as a special pointer and its size would be equal to any pointer.</p> <pre><code>var p : *int64 = null;\n</code></pre>"},{"location":"reference/varargs/","title":"Varargs","text":"<p>Amun has typed and un typed var arguments</p>"},{"location":"reference/varargs/#un-typed-varargs","title":"Un typed varargs","text":"<p>Un typed varargs allow you to pass any number of arguments with different types</p> <pre><code>fun function(varargs Any)\n</code></pre>"},{"location":"reference/varargs/#typed-varargs","title":"Typed varargs","text":"<p>Typed varargs allow you to pass any number of arguments with spesific type</p> <pre><code>fun function(varargs int64)\n</code></pre>"},{"location":"reference/variables/","title":"Variables","text":"<p>In Amun to declare a new variable you should use the keyword <code>var</code> with optional type</p> <pre><code>var x = 10;\n</code></pre> <pre><code>var y : int64 = 10;\n</code></pre> <pre><code>var name = \"Amun\";\n</code></pre> <p>You can declare a variable with undefined value but in this case you explicity set type to this variable</p> <pre><code>var x : int64 = ---;\n\nvar ptr : *int64 = ---;\n</code></pre>"},{"location":"reference/while/","title":"While","text":"<p>In Amun while loop is not different from any language while loop you just loop over and over until your condition evaluate to not true</p> <pre><code>while condition {\n    ...\n}\n</code></pre>"}]}